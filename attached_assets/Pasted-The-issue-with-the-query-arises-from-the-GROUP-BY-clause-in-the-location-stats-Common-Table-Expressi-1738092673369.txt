The issue with the query arises from the GROUP BY clause in the location_stats Common Table Expression (CTE). You are trying to use mode() WITHIN GROUP (ORDER BY o.weather_icon) in the SELECT clause, which is an aggregate function, but it is not included in the GROUP BY clause. In SQL, if you use an aggregate function in a query, it must either be in the GROUP BY clause or aggregated properly.

Fix
To resolve this, you need to adjust the query to properly handle the mode() function without breaking the GROUP BY clause. Here's the corrected query:

sql
Copy
Edit
WITH hourly_stats AS (
    SELECT 
        CASE 
            WHEN $1 = 'city' THEN g.city
            WHEN $1 = 'state' THEN COALESCE(g.state, 'Unknown')
            ELSE COALESCE(g.country, 'Unknown')
        END as location_name,
        date_trunc('hour', o.observation_timestamp) as hour,
        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY o.temperature) as temperature,
        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY o.wind_speed) as wind_speed
    FROM stations s
    JOIN geocodes g ON s.latitude = g.latitude AND s.longitude = g.longitude
    JOIN observations o ON s.station_id = o.station_id
    WHERE o.observation_timestamp >= NOW() - INTERVAL '7 days'
      AND (
        CASE 
          WHEN $1 = 'city' THEN g.city
          WHEN $1 = 'state' THEN g.state
          ELSE g.country
        END
      ) IS NOT NULL
      AND o.data_quality_score >= 0.8
      AND o.temperature BETWEEN -50 AND 50
    GROUP BY 
        CASE 
            WHEN $1 = 'city' THEN g.city
            WHEN $1 = 'state' THEN COALESCE(g.state, 'Unknown')
            ELSE COALESCE(g.country, 'Unknown')
        END,
        date_trunc('hour', o.observation_timestamp)
),
location_stats AS (
    SELECT 
        h.location_name,
        COUNT(DISTINCT s.station_id) AS station_count,
        FIRST_VALUE(h.temperature) OVER (PARTITION BY h.location_name ORDER BY h.hour DESC) as median_temperature,
        FIRST_VALUE(h.wind_speed) OVER (PARTITION BY h.location_name ORDER BY h.hour DESC) as median_wind_speed,
        FIRST_VALUE(h.temperature) OVER (PARTITION BY h.location_name ORDER BY h.hour DESC) - 
            LAG(h.temperature, 1) OVER (PARTITION BY h.location_name ORDER BY h.hour) as temp_change_1h,
        FIRST_VALUE(h.temperature) OVER (PARTITION BY h.location_name ORDER BY h.hour DESC) - 
            LAG(h.temperature, 24) OVER (PARTITION BY h.location_name ORDER BY h.hour) as temp_change_24h,
        FIRST_VALUE(h.temperature) OVER (PARTITION BY h.location_name ORDER BY h.hour DESC) - 
            LAG(h.temperature, 168) OVER (PARTITION BY h.location_name ORDER BY h.hour) as temp_change_7d
    FROM hourly_stats h
    JOIN stations s ON s.city = h.location_name
),
weather_icons AS (
    SELECT 
        CASE 
            WHEN $1 = 'city' THEN g.city
            WHEN $1 = 'state' THEN COALESCE(g.state, 'Unknown')
            ELSE COALESCE(g.country, 'Unknown')
        END as location_name,
        mode() WITHIN GROUP (ORDER BY o.weather_icon) as weather_icon
    FROM stations s
    JOIN geocodes g ON s.latitude = g.latitude AND s.longitude = g.longitude
    JOIN observations o ON s.station_id = o.station_id
    WHERE o.observation_timestamp >= NOW() - INTERVAL '7 days'
    GROUP BY 
        CASE 
            WHEN $1 = 'city' THEN g.city
            WHEN $1 = 'state' THEN COALESCE(g.state, 'Unknown')
            ELSE COALESCE(g.country, 'Unknown')
        END
),
sparkline_data AS (
    SELECT 
        location_name,
        json_agg(
            json_build_object(
                'temperature', median_temp,
                'timestamp', hour
            ) ORDER BY hour
        ) as hourly_data
    FROM (
        SELECT 
            CASE 
                WHEN $1 = 'city' THEN g.city
                WHEN $1 = 'state' THEN COALESCE(g.state, 'Unknown')
                ELSE COALESCE(g.country, 'Unknown')
            END as location_name,
            date_trunc('hour', o.observation_timestamp) as hour,
            PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY o.temperature) as median_temp
        FROM stations s
        JOIN geocodes g ON s.latitude = g.latitude AND s.longitude = g.longitude
        JOIN observations o ON s.station_id = o.station_id
        WHERE o.observation_timestamp >= NOW() - INTERVAL '24 hours'
          AND o.data_quality_score >= 0.8
          AND o.temperature BETWEEN -50 AND 50
        GROUP BY 
            CASE 
                WHEN $1 = 'city' THEN g.city
                WHEN $1 = 'state' THEN COALESCE(g.state, 'Unknown')
                ELSE COALESCE(g.country, 'Unknown')
            END,
            date_trunc('hour', o.observation_timestamp)
    ) hourly
    GROUP BY location_name
)
SELECT 
    l.location_name,
    l.station_count,
    ROUND(l.median_temperature::numeric, 2) as median_temperature,
    COALESCE(ROUND(l.median_wind_speed::numeric, 2), 0)::float as median_wind_speed,
    w.weather_icon,
    s.hourly_data as sparkline_data
FROM location_stats l
LEFT JOIN weather_icons w ON l.location_name = w.location_name
LEFT JOIN sparkline_data s ON l.location_name = s.location_name
ORDER BY l.station_count DESC;
Key Changes
Separate weather_icons CTE: I moved the mode() function into its own CTE called weather_icons and properly grouped by the location_name. This ensures the aggregation is done independently.
Adjusted JOIN for weather_icons: In the final SELECT, I joined the weather_icons CTE with the location_stats CTE to include the weather_icon data.
General Cleanup: Ensured consistent grouping and proper partitioning for window functions.
This revised query should now execute without syntax errors while producing the desired output.